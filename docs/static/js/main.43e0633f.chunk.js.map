{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["geojson","require","accessToken","markerScoresConfig","0","label","color","1","2","3","4","5","mapLayerConfig","type","source","url","paint","App","props","state","center","zoom","markers","selectedMarker","Mapbox","ReactMapboxGl","minZoom","maxZoom","mapData","this","setState","features","mapEvent","lngLat","coords","lng","lat","newMarker","geometry","coordinates","properties","title","description","score","prevState","selectedMarkerIndex","_getMarkerIndex","newMarkers","splice","onClosePopup","value","marker","map","getCanvas","style","cursor","length","_exportToJsonFile","className","renderMarkersInfo","renderMap","flyToOptions","speed","onClick","e","onAddMarker","onDrag","renderMarkers","renderMarkerPopup","offset","onChange","onChangeMarkerScore","target","options","i","Object","keys","push","key","renderOptions","onRemoveMarker","draggable","onMouseEnter","onMarkerHover","onMouseLeave","onMarkerNotHover","onDragEnd","onMarkerDragEnd","calcScoresAmounts","reduce","sum","result","renderTbody","onExportData","disabled","findIndex","data","dataStr","JSON","stringify","dataUri","encodeURIComponent","linkElement","document","createElement","setAttribute","click","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.43e0633f.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactMapboxGl, { Layer, GeoJSONLayer, Feature, Popup } from \"react-mapbox-gl\";\r\n\r\nimport './App.css';\r\n\r\nconst geojson = require('./geoData.json');\r\nconst accessToken = \"pk.eyJ1IjoiZ3J5Z29yaWkiLCJhIjoiY2swZ3QzdXhuMDQzdTNpbGpoY24zaTY4diJ9.El3swWKoso1paibm4U_F3Q\";\r\n\r\nconst markerScoresConfig = {\r\n  0: {\r\n    label: 'Zero',\r\n    color: 'black'\r\n  },\r\n  1: {\r\n    label: 'One',\r\n    color: 'grey'\r\n  },\r\n  2: {\r\n    label: 'Two',\r\n    color: 'red'\r\n  },\r\n  3: {\r\n    label: 'Three',\r\n    color: 'orange'\r\n  },\r\n  4: {\r\n    label: 'Four',\r\n    color: 'lime'\r\n  },\r\n  5: {\r\n    label: 'Five',\r\n    color: 'green'\r\n  },\r\n}\r\n\r\nconst mapLayerConfig = {\r\n  type: \"circle\",\r\n  source: {\r\n    type: 'vector',\r\n    url: 'mapbox://examples.8fgz4egr'\r\n  },\r\n  \"source-layer\": 'sf2010',\r\n  paint: {\r\n    // make circles larger as the user zooms from z12 to z22\r\n    'circle-radius': {\r\n      'base': 1.75,\r\n      'stops': [[12, 2], [22, 180]]\r\n    },\r\n    // color circles by ethnicity, using a match expression\r\n    // https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-match\r\n    'circle-color': [\r\n      'match',\r\n      ['get', 'score'],\r\n      0, markerScoresConfig[0].color,\r\n      1, markerScoresConfig[1].color,\r\n      2, markerScoresConfig[2].color,\r\n      3, markerScoresConfig[3].color,\r\n      4, markerScoresConfig[4].color,\r\n      5, markerScoresConfig[5].color,\r\n      /* other */ 'white'\r\n    ]\r\n  }\r\n};\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      center: [24.000906986937594, 49.80259820083478], // TODO: get current location\r\n      zoom: [14],\r\n      markers: null,\r\n      selectedMarker: null,\r\n    }\r\n\r\n    this.Mapbox = ReactMapboxGl({\r\n      minZoom: 8,\r\n      maxZoom: 15,\r\n      accessToken\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    const mapData = geojson;\r\n\r\n    this.setState({\r\n      markers: mapData.features\r\n    })\r\n  }\r\n\r\n  onAddMarker(mapEvent) {\r\n    const { lng, lat } = mapEvent.lngLat;\r\n    const coords = [lng, lat];\r\n\r\n    if (coords) {\r\n      const newMarker = {\r\n        type: 'Feature',\r\n        geometry: {\r\n          type: 'Point',\r\n          coordinates: coords,\r\n        },\r\n        properties: {\r\n          title: \"\",\r\n          description: \"\",\r\n          score: 0,\r\n        }\r\n      }\r\n\r\n      this.setState(prevState => ({\r\n        markers: [...prevState.markers, newMarker],\r\n        selectedMarker: newMarker,\r\n        center: coords,\r\n        zoom: [15],\r\n      }));\r\n    }\r\n  }\r\n\r\n  onRemoveMarker() {\r\n    const selectedMarkerIndex = this._getMarkerIndex();\r\n\r\n    if (selectedMarkerIndex >= 0) {\r\n      const newMarkers = [...this.state.markers];\r\n      newMarkers.splice(selectedMarkerIndex, 1);\r\n      this.setState({\r\n        markers: newMarkers\r\n      })\r\n    }\r\n    this.onClosePopup();\r\n  }\r\n\r\n  onClosePopup() {\r\n    this.setState({\r\n      selectedMarker: null,\r\n    })\r\n  }\r\n\r\n  onChangeMarkerScore(value) {\r\n    const { markers } = this.state;\r\n    const selectedMarkerIndex = this._getMarkerIndex();\r\n\r\n    if (selectedMarkerIndex >= 0) {\r\n      const newMarkers = [...markers];\r\n      newMarkers[selectedMarkerIndex].properties.score = +value;\r\n\r\n      this.setState({\r\n        markers: newMarkers\r\n      })\r\n    }\r\n  }\r\n\r\n  onMarkerHover(mapEvent, marker) {\r\n    mapEvent.map.getCanvas().style.cursor = 'pointer';\r\n\r\n    this.setState({\r\n      selectedMarker: marker,\r\n    })\r\n  }\r\n\r\n  onMarkerNotHover(mapEvent) {\r\n    mapEvent.map.getCanvas().style.cursor = '';\r\n  }\r\n\r\n  onDrag() {\r\n    if (this.state.selectedMarker) {\r\n      this.setState({ selectedMarker: null });\r\n    }\r\n  };\r\n\r\n  onMarkerDragEnd(mapEvent) {\r\n    const { markers } = this.state;\r\n    const { lng, lat } = mapEvent.lngLat;\r\n    const coords = [lng, lat];\r\n    const selectedMarkerIndex = this._getMarkerIndex();\r\n\r\n    if (selectedMarkerIndex >= 0 && coords) {\r\n      const newMarkers = [...markers];\r\n      newMarkers[selectedMarkerIndex].geometry.coordinates = coords;\r\n\r\n      this.setState({\r\n        markers: newMarkers,\r\n        center: coords\r\n      })\r\n    }\r\n  }\r\n  \r\n  onExportData() {\r\n    const { markers } = this.state;\r\n\r\n    if (markers.length) {\r\n      this._exportToJsonFile(markers)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { markers } = this.state;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <h2>Mapbox app</h2>\r\n        </header>\r\n        {markers &&\r\n          <div className=\"wrapper\">\r\n            {this.renderMarkersInfo()}\r\n            {this.renderMap()}\r\n          </div>\r\n        }\r\n      </div>\r\n    )\r\n  };\r\n\r\n  renderMap() {\r\n    const { center, zoom, selectedMarker } = this.state;\r\n    const Mapbox = this.Mapbox;\r\n\r\n    return (\r\n      <Mapbox\r\n        style=\"mapbox://styles/mapbox/streets-v11\"\r\n        className=\"mapContainer\"\r\n        center={center}\r\n        zoom={zoom}\r\n        flyToOptions={{speed: 0.8 }}\r\n        onClick={(e, mapEvent) => this.onAddMarker(mapEvent)}\r\n        onDrag={() => this.onDrag()}\r\n        >\r\n          <Layer {...mapLayerConfig}>\r\n            {this.renderMarkers()}\r\n          </Layer>\r\n          {/* <GeoJSONLayer {...mapLayerConfig} TODO: investigate how to fix this layer\r\n            data={geojson}\r\n          /> */}\r\n          {selectedMarker && this.renderMarkerPopup()}\r\n      </Mapbox>\r\n    )\r\n  }\r\n\r\n  renderMarkerPopup() {\r\n    const { selectedMarker } = this.state;\r\n\r\n    if (!selectedMarker) {\r\n      return null;\r\n    }\r\n\r\n    const renderOptions = () => {\r\n      let options = [];\r\n\r\n      for (let i = 0; i < Object.keys(markerScoresConfig).length; i++) {\r\n        options.push(<option key={i} value={i}>{markerScoresConfig[i].label}</option>);\r\n      }\r\n      return options;\r\n    }\r\n\r\n    return (\r\n      <Popup\r\n        coordinates={selectedMarker.geometry.coordinates}\r\n        offset={{\r\n          'bottom': [0, -10],\r\n        }}\r\n      >\r\n        <h4>Marker info</h4>\r\n        <label>Score: \r\n          <select\r\n            value={selectedMarker.properties.score}\r\n            onChange={(e) => this.onChangeMarkerScore(e.target.value)}>\r\n            {renderOptions()}\r\n          </select>\r\n        </label>\r\n        <br />\r\n        <button onClick={() => this.onClosePopup()}>Close</button>\r\n        <button onClick={() => this.onRemoveMarker()}>Remove</button>\r\n      </Popup>\r\n    )\r\n  }\r\n\r\n  renderMarkers() {\r\n    return this.state.markers.length > 0 &&\r\n      this.state.markers.map((marker) => {\r\n        return (\r\n          <Feature\r\n            draggable={true}\r\n            coordinates={marker.geometry.coordinates}\r\n            properties={marker.properties}\r\n            onMouseEnter={(e) => this.onMarkerHover(e, marker)}\r\n            onMouseLeave={(e) => this.onMarkerNotHover(e, marker)}\r\n            onDragEnd={(e) => this.onMarkerDragEnd(e)}\r\n          />\r\n        );\r\n      })\r\n  }\r\n\r\n  renderMarkersInfo() {\r\n    const renderTbody = () => {\r\n      const result = [];\r\n      for (let key in markerScoresConfig) {\r\n        result.push(\r\n          <tr>\r\n            <td>{markerScoresConfig[key].label}</td>\r\n            <td>{calcScoresAmounts(key)}</td>\r\n          </tr>\r\n        )\r\n      }\r\n      return result;\r\n    }\r\n\r\n    const calcScoresAmounts = (score) => {\r\n      const { markers } = this.state;\r\n\r\n      return markers.reduce((sum, marker) => {\r\n        if (marker.properties.score === +score) {\r\n          return sum += 1;\r\n        }\r\n        return sum;\r\n      }, 0)\r\n    }\r\n\r\n    return (\r\n      <div className=\"markersInfo\">\r\n        <h3>Markers info</h3>\r\n        <table>\r\n          <thead>\r\n            <th>\r\n              <td>Score</td>\r\n              <td>Amount</td>\r\n            </th>\r\n          </thead>\r\n          <tbody>\r\n            {renderTbody()}\r\n          </tbody>\r\n          <tfoot>\r\n            <tr>\r\n              <td><b>Total</b></td>\r\n              <td><b>{this.state.markers.length}</b></td>\r\n            </tr>\r\n          </tfoot>\r\n        </table>\r\n        <button onClick={() => this.onExportData()} disabled={!this.state.markers.length}>\r\n            Export Markers as JSON\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  _getMarkerIndex() {\r\n    const { markers, selectedMarker } = this.state;\r\n    const markersCoords = markers.map(marker => marker.geometry.coordinates);\r\n\r\n    return markersCoords.findIndex(coords => {\r\n      return coords[0] === selectedMarker.geometry.coordinates[0] &&\r\n        coords[1] === selectedMarker.geometry.coordinates[1]\r\n    });\r\n  }\r\n\r\n  _exportToJsonFile(data) {\r\n    let dataStr = JSON.stringify(data);\r\n    let dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);\r\n    let exportFileDefaultName = 'geoData.json';\r\n    let linkElement = document.createElement('a');\r\n\r\n    linkElement.setAttribute('href', dataUri);\r\n    linkElement.setAttribute('download', exportFileDefaultName);\r\n    linkElement.click();\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}